"""
Django settings for vin project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from django.conf import settings
import os
from celery.schedules import crontab

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-$b)plfbyt19&q6#29igyf$%g6q#!^bogk24f(mg8a2a1j$%)=m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

CORS_ALLOW_ALL_ORIGINS = True

CSRF_TRUSTED_ORIGINS = ['http://localhost:4200','http://localhost:3000/','http://localhost:3010/','http://localhost:80/','http://localhost:3001/','http://localhost:8000/','http://localhost:8006/','http://hul.aivolved.in','https://hul.aivolved.in','https://hul.aivolved.in', 'https://www.hul.aivolved.in']

CORS_ORIGIN_ALLOW_ALL=True

CORS_ALLOW_CREDENTIALS = True

CSRF_COOKIE_SECURE = True

CORS_ALLOWED_ORIGINS = [
    'https://hul.aivolved.in',
    'https://www.hul.aivolved.in'
]

ALLOWED_HOSTS = ['*','localhost', '127.0.0.1', '[::1]', 'hul.aivolved.in', 'www.hul.aivolved.in']



# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'dashboard',
    'users',
    'rest_framework',
    'corsheaders',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'rest_framework_swagger',
    'drf_yasg',
    'storages',
    'import_export',
    'django_celery_beat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'vin.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR/'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

ASGI_APPLICATION = 'vin.asgi.application' 

WSGI_APPLICATION = 'vin.wsgi.application'

AUTH_USER_MODEL = 'users.User'

SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH': False,  # Set to False if you're using Token/JWT authentication
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header',
        },
    },
    'PERSIST_AUTH': True,
    'SCHEMA_URL': 'https://hul.aivolved.in/swagger.json'
}
# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# settings for local mysql 

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.mysql',
    #     'NAME': 'vin',                  # Local database name
    #     'USER': 'saitreddy',            # Local database user
    #     'PASSWORD': 'sai',              # Local database password
    #     'HOST': 'localhost',            # Local database host
    #     'PORT': '3306',                 # Local database port
    # },
    'default':
           {
           'ENGINE': 'django.db.backends.mysql',
           'NAME': 'vin',
           'USER': 'root',  
           'PASSWORD': 'sai',  
           'HOST': 'db',  
           'PORT': '3306',    
           }
    # 'cloud': {
    #     'ENGINE': 'django.db.backends.mysql',
    #     'NAME': 'VIN_LOCAL',            # Cloud database name
    #     'USER': 'root',                 # Cloud database user
    #     'PASSWORD': 'AIVolved',         # Cloud database password
    #     'HOST': '159.65.157.118',       # Cloud database host (replace with IP or domain)
    #     'PORT': '3306',                 # Cloud database port
    # },
}



# DATABASES = {
#         'default': 
#             {
#             'ENGINE': 'django.db.backends.mysql',
#             'NAME': 'VIN_LOCAL',
#             'USER': 'root',    
#             'PASSWORD': 'AIVolved',    
#             'HOST': '159.65.157.118',    
#             'PORT': '3306',   
#             }
#     }


# settings for docker 

# DATABASES = {
#        'default':
#            {
#            'ENGINE': 'django.db.backends.mysql',
#            'NAME': 'vin',
#            'USER': 'root',  
#            'PASSWORD': 'sai',  
#            'HOST': 'db',  
#            'PORT': '3306',    
#            }
#    }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # Add any other authentication classes you use
    ),
    
}

##### for cacheing settings ##### 

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://redis:6379/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}


### Simple JWT settings 

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=10),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,

    "ALGORITHM": "HS256",
    "SIGNING_KEY": settings.SECRET_KEY,
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",

    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),

    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
}   

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# PORT = '8000'
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# STATIC_URL = '/static/'
# STATIC_ROOT = os.path.join(BASE_DIR, 'site', 'static')

# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'site', 'static', 'build')
# ]


# static files settings for docker 

# media files settings for docker 

MEDIA_URL = '/media/'
MEDIA_ROOT = '/app/media/'

# media files settings for local 

# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

PORT = '8000'
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR,'static')
]

STATIC_ROOT = os.path.join(BASE_DIR,'staticfiles')

####### S3 SPACES SETTINGS ######

# DigitalOcean Spaces settings


AWS_ACCESS_KEY_ID = 'DO00A8RA4YEXAADCY27X'
AWS_SECRET_ACCESS_KEY = 'ahReatZxgmdU/hrC81/oXaqdlHlbkkm+w+tDy7kXlhI'
AWS_STORAGE_BUCKET_NAME = 'vin'
AWS_S3_ENDPOINT_URL = 'https://blr1.digitaloceanspaces.com'
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
AWS_LOCATION = 'vin'

#### Email Settings ####

EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'vision@aivolved.in'
# EMAIL_HOST_PASSWORD = 'ijhafhiwbgfewbew'
EMAIL_HOST_PASSWORD = 'jplgbnxvcbuizrgr'
EMAIL_PORT = 587
APPLICATION_EMAIL = 'VISION<vision@aivolved.in>'
DEFAULT_FROM_EMAIL = 'VISION<vision@aivolved.in>'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'


# Celery Configuration
CELERY_BROKER_URL = 'redis://redis:6379/0'
CELERY_RESULT_BACKEND = 'redis://redis:6379/0'

# Celery Beat Scheduler
CELERY_BEAT_SCHEDULE = {
    # 'sync-data-with-cloud-every-30-minutes': {
    #     'task': 'dashboard.tasks.sync_data_with_cloud',
    #     'schedule': crontab(minute='*/10'),
    # },
    # 'sync-machine-parameters-every-10-minutes': {
    #     'task': 'dashboard.tasks.sync_machine_parameters',
    #     'schedule': crontab(minute='*/1'),
    # },
    'cache-dashboard-data-every-minute': {
        'task': 'dashboard.tasks.cache_dashboard_data',
        'schedule': crontab(minute='*/1'),  # Run every minute
    },
}

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'